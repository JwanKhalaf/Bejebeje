// <auto-generated />
using System;
using Bejebeje.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Bejebeje.DataAccess.Migrations
{
    [DbContext(typeof(BbContext))]
    [Migration("20190710063138_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Bejebeje.Domain.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsApproved")
                        .HasColumnName("is_approved");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnName("modified_at");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_artists");

                    b.ToTable("artists");
                });

            modelBuilder.Entity("Bejebeje.Domain.ArtistImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ArtistId")
                        .HasColumnName("artist_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<byte[]>("Data")
                        .HasColumnName("data");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnName("modified_at");

                    b.HasKey("Id")
                        .HasName("pk_artist_images");

                    b.HasIndex("ArtistId")
                        .IsUnique()
                        .HasName("ix_artist_images_artist_id");

                    b.ToTable("artist_images");
                });

            modelBuilder.Entity("Bejebeje.Domain.ArtistSlug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ArtistId")
                        .HasColumnName("artist_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsPrimary")
                        .HasColumnName("is_primary");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnName("modified_at");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_artist_slug");

                    b.HasIndex("ArtistId")
                        .HasName("ix_artist_slug_artist_id");

                    b.ToTable("artist_slug");
                });

            modelBuilder.Entity("Bejebeje.Domain.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Biography")
                        .HasColumnName("biography");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsApproved")
                        .HasColumnName("is_approved");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnName("modified_at");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_authors");

                    b.ToTable("authors");
                });

            modelBuilder.Entity("Bejebeje.Domain.AuthorImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("AuthorId")
                        .HasColumnName("author_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<byte[]>("Data")
                        .HasColumnName("data");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnName("modified_at");

                    b.HasKey("Id")
                        .HasName("pk_author_image");

                    b.HasIndex("AuthorId")
                        .IsUnique()
                        .HasName("ix_author_image_author_id");

                    b.ToTable("author_image");
                });

            modelBuilder.Entity("Bejebeje.Domain.AuthorSlug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("AuthorId")
                        .HasColumnName("author_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsPrimary")
                        .HasColumnName("is_primary");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnName("modified_at");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_author_slug");

                    b.HasIndex("AuthorId")
                        .HasName("ix_author_slug_author_id");

                    b.ToTable("author_slug");
                });

            modelBuilder.Entity("Bejebeje.Domain.Lyric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ArtistId")
                        .HasColumnName("artist_id");

                    b.Property<int?>("AuthorId")
                        .HasColumnName("author_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<string>("HtmlBody")
                        .HasColumnName("html_body");

                    b.Property<bool>("IsApproved")
                        .HasColumnName("is_approved");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("is_deleted");

                    b.Property<string>("MarkdownBody")
                        .HasColumnName("markdown_body");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnName("modified_at");

                    b.Property<string>("Title")
                        .HasColumnName("title");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_lyrics");

                    b.HasIndex("ArtistId")
                        .HasName("ix_lyrics_artist_id");

                    b.HasIndex("AuthorId")
                        .HasName("ix_lyrics_author_id");

                    b.ToTable("lyrics");
                });

            modelBuilder.Entity("Bejebeje.Domain.LyricSlug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsPrimary")
                        .HasColumnName("is_primary");

                    b.Property<int>("LyricId")
                        .HasColumnName("lyric_id");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnName("modified_at");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_lyric_slugs");

                    b.HasIndex("LyricId")
                        .HasName("ix_lyric_slugs_lyric_id");

                    b.ToTable("lyric_slugs");
                });

            modelBuilder.Entity("Bejebeje.Domain.ArtistImage", b =>
                {
                    b.HasOne("Bejebeje.Domain.Artist", "Artist")
                        .WithOne("Image")
                        .HasForeignKey("Bejebeje.Domain.ArtistImage", "ArtistId")
                        .HasConstraintName("fk_artist_images_artists_artist_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bejebeje.Domain.ArtistSlug", b =>
                {
                    b.HasOne("Bejebeje.Domain.Artist")
                        .WithMany("Slugs")
                        .HasForeignKey("ArtistId")
                        .HasConstraintName("fk_artist_slug_artists_artist_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bejebeje.Domain.AuthorImage", b =>
                {
                    b.HasOne("Bejebeje.Domain.Author", "Author")
                        .WithOne("Image")
                        .HasForeignKey("Bejebeje.Domain.AuthorImage", "AuthorId")
                        .HasConstraintName("fk_author_image_authors_author_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bejebeje.Domain.AuthorSlug", b =>
                {
                    b.HasOne("Bejebeje.Domain.Author")
                        .WithMany("Slugs")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("fk_author_slug_authors_author_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bejebeje.Domain.Lyric", b =>
                {
                    b.HasOne("Bejebeje.Domain.Artist", "Artist")
                        .WithMany("Lyrics")
                        .HasForeignKey("ArtistId")
                        .HasConstraintName("fk_lyrics_artists_artist_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bejebeje.Domain.Author", "Author")
                        .WithMany("Lyrics")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("fk_lyrics_authors_author_id");
                });

            modelBuilder.Entity("Bejebeje.Domain.LyricSlug", b =>
                {
                    b.HasOne("Bejebeje.Domain.Lyric")
                        .WithMany("Slugs")
                        .HasForeignKey("LyricId")
                        .HasConstraintName("fk_lyric_slugs_lyrics_lyric_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
